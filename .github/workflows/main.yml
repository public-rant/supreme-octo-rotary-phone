      # Use the output from the `hello` step
      # - name: Setup Node Modules
      # - name: Install Playwright Browsers
      # - name: Run Playwright tests
      # - uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: playwright-report
      #     path: playwright-report
      #     retention-days: 30
      # - uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: serenity-report
      #     path: target/site/serenity
      #     retention-days: 30

  # test:
  #   timeout-minutes: 60
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       TESTS: ['boom']
  #   steps:
  #     - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4

  #     - name: Move Playwright reports
  #       run: mv playwright-report target/site/playwright

      # - name: GitHub Pages
      #   if: github.ref == 'refs/heads/main'
      #   uses: JamesIves/github-pages-deploy-action@v4.5.0
      #   with:
      #     ssh-key: ${{ secrets.DEPLOY_KEY }}
      #     BRANCH: gh-pages
      #     FOLDER: target/site/playwright
      #     CLEAN: true
name: build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize ]
  workflow_dispatch:
    inputs:
      tests:
        description: 'Environment to run tests against'
        type: string
        required: true
  repository_dispatch:
    types:
      - test

jobs:
  hello_world_job:
    strategy:
      matrix:
        tests: ${{ github.event.client_payload.tests }}
    name: A job to say hello
    runs-on: ubuntu-latest
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v4
    
      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci
    
      - name: Connect to PostgreSQL
        # Runs a script that creates a PostgreSQL table, populates
        # the table with data, and then retrieves the data
        run: node client.js
        # Environment variables used by the `client.js` script to create
        # a new PostgreSQL table.
        env:
          # The hostname used to communicate with the PostgreSQL service container
          POSTGRES_HOST: localhost
          # The default PostgreSQL port
          POSTGRES_PORT: 5432
        